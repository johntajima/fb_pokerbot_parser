
# line 1 "lib/fb_pokerbot_parser/message_parser.rl"

class FbPokerbotParser::MessageParser

  attr_accessor :command, 
                :status,
                :options, 
                :cards, 
                :actions, 
                :hole_cards, 
                :flop, :turn, :river,
                :amount,
                :blinds


  COMMANDS = {
    "nh"       => :new_hand,
    "nt"       => :new_tourney_hand,
    "hero"     => :hero,
    "pre"      => :preflop_action,
    "flop"     => :flop,
    "turn"     => :turn,
    "river"    => :river,
    "show"     => :showdown,
    "c"        => :set,
    "config"   => :set,
    "set"      => :set 
  }

  ACTIONS = {
    'b'     => :bet,
    'bet'   => :bet,
    'c'     => :call,
    'call'  => :call,
    'f'     => :fold,
    'fold'  => :fold,
    'r'     => :raise,
    'raise' => :raise,
    'ch'    => :check,
    'check' => :check,
    'm'     => :muck,
    'muck'  => :muck
  }

  NEW_HAND_OPTIONS = {
    'b' => :button,
    'p' => :players,
    'h' => :hero
  }


# line 188 "lib/fb_pokerbot_parser/message_parser.rl"


  def initialize(data)
    
# line 59 "lib/fb_pokerbot_parser/message_parser.rb"
class << self
	attr_accessor :_pokerbot_actions
	private :_pokerbot_actions, :_pokerbot_actions=
end
self._pokerbot_actions = [
	0, 1, 0, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	22, 1, 23, 1, 24, 1, 25, 1, 
	26, 1, 27, 1, 28, 1, 29, 1, 
	30, 1, 31, 1, 32, 1, 35, 1, 
	36, 1, 41, 1, 49, 1, 50, 1, 
	51, 1, 53, 1, 54, 1, 55, 1, 
	56, 1, 57, 1, 58, 2, 0, 42, 
	2, 1, 44, 2, 2, 43, 2, 3, 
	41, 2, 3, 48, 2, 4, 41, 2, 
	4, 49, 2, 5, 41, 2, 5, 50, 
	2, 6, 51, 2, 7, 45, 2, 7, 
	47, 2, 8, 45, 2, 8, 46, 2, 
	8, 47, 2, 9, 41, 2, 33, 34, 
	2, 36, 3, 2, 36, 4, 2, 36, 
	5, 2, 36, 9, 2, 36, 10, 2, 
	36, 11, 2, 36, 13, 2, 36, 14, 
	2, 36, 38, 2, 36, 39, 2, 36, 
	40, 3, 0, 1, 44, 3, 0, 2, 
	43, 3, 13, 21, 52, 3, 14, 21, 
	52, 3, 15, 21, 52, 3, 16, 21, 
	52, 3, 17, 21, 52, 3, 18, 21, 
	52, 3, 19, 21, 52, 3, 20, 21, 
	52, 3, 36, 13, 37
]

class << self
	attr_accessor :_pokerbot_key_offsets
	private :_pokerbot_key_offsets, :_pokerbot_key_offsets=
end
self._pokerbot_key_offsets = [
	0, 0, 1, 2, 3, 4, 5, 12, 
	13, 14, 15, 18, 19, 23, 28, 29, 
	30, 33, 35, 36, 37, 38, 39, 40, 
	41, 42, 45, 46, 47, 50, 55, 56, 
	57, 58, 59, 62, 64, 67, 69, 70, 
	71, 72, 75, 86, 87, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 111, 115, 116, 117, 120, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	144, 155, 156, 164, 178, 192, 193, 201, 
	215, 229, 230, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 250, 261, 262, 
	270, 284, 298, 299, 307, 310, 311, 312, 
	313, 314, 315, 316, 317, 318, 319, 323, 
	332, 333, 334, 337, 343, 344, 345, 346, 
	347, 348, 349, 351, 354, 362, 366, 371, 
	372, 375, 376, 377, 378, 379, 380, 381, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	393, 398, 401, 410, 411, 412, 415, 421, 
	433, 434, 435, 438, 444, 445, 446, 447, 
	448, 450, 453, 461, 465, 470, 471, 474, 
	475, 476, 477, 478, 479, 480, 484, 485, 
	486, 487, 488, 489, 490, 491, 492, 493, 
	494, 499, 501, 504, 512, 516, 521, 522, 
	525, 529, 530, 531, 532, 533, 534, 535, 
	536, 537, 542, 543, 544, 545, 546, 547, 
	548, 549, 550, 551, 554, 555, 556, 559, 
	564, 565, 566, 567, 568, 571, 578, 579, 
	580, 581, 582, 583, 585, 586, 587, 588, 
	589, 590, 591, 592, 593, 594, 595, 596, 
	597, 598, 599, 600, 601, 602, 603, 604, 
	605, 606, 607, 608, 614, 617, 619, 628, 
	635, 641, 650, 651, 654, 659, 660, 663, 
	668, 672, 673, 676, 677, 678, 679, 682, 
	683, 684, 685, 686, 687, 688, 691, 695, 
	697, 702, 705, 710, 713, 716, 716, 718, 
	718, 719, 720, 721, 724, 727, 730, 733, 
	735, 735, 736, 737, 738, 740, 742, 742, 
	743, 744, 745, 748, 753, 757, 760, 764, 
	769, 774, 777, 781, 785, 789, 795, 799, 
	805, 810, 813, 814, 814, 815, 815, 818, 
	819, 819, 819, 820, 821, 822, 822, 823, 
	823, 824, 825, 825, 826, 826, 835, 845, 
	856, 867, 876, 886, 897, 909, 920, 931, 
	940, 949, 958, 968, 979, 991, 1002, 1011, 
	1022, 1034
]

class << self
	attr_accessor :_pokerbot_trans_keys
	private :_pokerbot_trans_keys, :_pokerbot_trans_keys=
end
self._pokerbot_trans_keys = [
	116, 101, 115, 116, 32, 97, 98, 99, 
	100, 102, 104, 115, 110, 116, 101, 32, 
	9, 13, 97, 32, 110, 9, 13, 32, 
	9, 13, 48, 57, 116, 101, 32, 9, 
	13, 105, 108, 103, 95, 98, 108, 105, 
	110, 100, 32, 9, 13, 98, 98, 32, 
	9, 13, 32, 9, 13, 48, 57, 105, 
	110, 100, 115, 32, 9, 13, 48, 57, 
	47, 48, 57, 48, 57, 97, 114, 100, 
	32, 9, 13, 49, 65, 81, 97, 113, 
	50, 57, 74, 75, 106, 107, 48, 72, 
	83, 104, 115, 67, 68, 99, 100, 101, 
	102, 97, 117, 108, 116, 95, 97, 99, 
	116, 105, 111, 110, 32, 9, 13, 97, 
	99, 102, 109, 108, 108, 32, 9, 13, 
	32, 99, 102, 109, 9, 13, 108, 108, 
	99, 107, 108, 100, 108, 111, 112, 45, 
	99, 97, 114, 100, 115, 32, 9, 13, 
	49, 65, 81, 97, 113, 50, 57, 74, 
	75, 106, 107, 48, 72, 83, 104, 115, 
	67, 68, 99, 100, 32, 49, 65, 81, 
	97, 113, 9, 13, 50, 57, 74, 75, 
	106, 107, 32, 49, 65, 81, 97, 113, 
	9, 13, 50, 57, 74, 75, 106, 107, 
	48, 72, 83, 104, 115, 67, 68, 99, 
	100, 32, 49, 65, 81, 97, 113, 9, 
	13, 50, 57, 74, 75, 106, 107, 32, 
	49, 65, 81, 97, 113, 9, 13, 50, 
	57, 74, 75, 106, 107, 48, 72, 83, 
	104, 115, 67, 68, 99, 100, 111, 108, 
	101, 45, 99, 97, 114, 100, 115, 32, 
	9, 13, 49, 65, 81, 97, 113, 50, 
	57, 74, 75, 106, 107, 48, 72, 83, 
	104, 115, 67, 68, 99, 100, 32, 49, 
	65, 81, 97, 113, 9, 13, 50, 57, 
	74, 75, 106, 107, 32, 49, 65, 81, 
	97, 113, 9, 13, 50, 57, 74, 75, 
	106, 107, 48, 72, 83, 104, 115, 67, 
	68, 99, 100, 101, 109, 116, 97, 116, 
	95, 97, 99, 116, 105, 111, 110, 32, 
	115, 9, 13, 97, 98, 99, 102, 104, 
	108, 109, 115, 117, 108, 108, 32, 9, 
	13, 32, 99, 102, 109, 9, 13, 108, 
	108, 99, 107, 108, 100, 98, 116, 32, 
	9, 13, 32, 98, 99, 102, 109, 114, 
	9, 13, 32, 101, 9, 13, 32, 9, 
	13, 48, 57, 116, 32, 9, 13, 108, 
	108, 99, 107, 108, 100, 32, 97, 9, 
	13, 105, 115, 101, 110, 106, 98, 116, 
	103, 32, 9, 13, 49, 51, 32, 9, 
	13, 97, 98, 99, 102, 104, 108, 109, 
	115, 117, 108, 108, 32, 9, 13, 32, 
	99, 102, 109, 9, 13, 32, 97, 98, 
	99, 102, 104, 108, 109, 115, 117, 9, 
	13, 108, 108, 32, 9, 13, 32, 99, 
	102, 109, 9, 13, 108, 100, 99, 107, 
	98, 116, 32, 9, 13, 32, 98, 99, 
	102, 109, 114, 9, 13, 32, 101, 9, 
	13, 32, 9, 13, 48, 57, 116, 32, 
	9, 13, 108, 108, 99, 107, 108, 100, 
	32, 97, 9, 13, 105, 115, 101, 110, 
	108, 108, 106, 98, 116, 103, 32, 9, 
	13, 49, 51, 98, 116, 32, 9, 13, 
	32, 98, 99, 102, 109, 114, 9, 13, 
	32, 101, 9, 13, 32, 9, 13, 48, 
	57, 116, 32, 9, 13, 32, 97, 9, 
	13, 105, 115, 101, 110, 106, 98, 116, 
	103, 32, 9, 13, 49, 51, 97, 108, 
	108, 95, 98, 108, 105, 110, 100, 32, 
	9, 13, 115, 98, 32, 9, 13, 32, 
	9, 13, 48, 57, 97, 116, 117, 115, 
	32, 9, 13, 102, 104, 110, 112, 114, 
	115, 116, 111, 112, 114, 111, 119, 104, 
	116, 97, 110, 100, 111, 117, 114, 110, 
	101, 121, 101, 108, 111, 112, 118, 101, 
	114, 104, 119, 111, 119, 110, 114, 110, 
	32, 101, 104, 116, 9, 13, 47, 48, 
	57, 48, 57, 32, 48, 49, 98, 115, 
	9, 13, 50, 57, 47, 48, 98, 104, 
	112, 49, 57, 47, 98, 104, 112, 48, 
	57, 32, 48, 49, 98, 115, 9, 13, 
	50, 57, 98, 32, 9, 13, 32, 9, 
	13, 48, 57, 98, 32, 9, 13, 32, 
	9, 13, 48, 57, 32, 98, 9, 13, 
	119, 32, 9, 13, 97, 110, 100, 32, 
	9, 13, 111, 117, 114, 110, 101, 121, 
	32, 9, 13, 32, 116, 9, 13, 46, 
	110, 32, 9, 13, 48, 57, 32, 9, 
	13, 32, 9, 13, 48, 57, 32, 9, 
	13, 47, 48, 57, 97, 104, 101, 111, 
	117, 32, 9, 13, 32, 9, 13, 32, 
	9, 13, 32, 9, 13, 97, 104, 101, 
	111, 117, 48, 57, 97, 104, 101, 111, 
	117, 97, 104, 111, 32, 97, 104, 9, 
	13, 32, 111, 9, 13, 32, 9, 13, 
	32, 117, 9, 13, 32, 9, 13, 48, 
	57, 32, 97, 104, 9, 13, 32, 9, 
	13, 32, 101, 9, 13, 32, 111, 9, 
	13, 32, 117, 9, 13, 32, 97, 104, 
	111, 9, 13, 32, 101, 9, 13, 32, 
	97, 104, 111, 9, 13, 32, 9, 13, 
	48, 57, 32, 9, 13, 108, 101, 101, 
	104, 116, 32, 116, 114, 102, 105, 111, 
	100, 117, 32, 48, 49, 98, 115, 9, 
	13, 50, 57, 32, 47, 48, 49, 98, 
	115, 9, 13, 50, 57, 32, 48, 49, 
	98, 104, 112, 115, 9, 13, 50, 57, 
	32, 48, 49, 98, 104, 112, 115, 9, 
	13, 50, 57, 32, 48, 49, 98, 115, 
	9, 13, 50, 57, 32, 47, 48, 49, 
	98, 115, 9, 13, 50, 57, 32, 47, 
	49, 98, 104, 112, 115, 9, 13, 48, 
	57, 32, 47, 48, 49, 98, 104, 112, 
	115, 9, 13, 50, 57, 32, 48, 49, 
	98, 104, 112, 115, 9, 13, 50, 57, 
	32, 48, 49, 98, 104, 112, 115, 9, 
	13, 50, 57, 32, 48, 49, 98, 115, 
	9, 13, 50, 57, 32, 48, 49, 98, 
	115, 9, 13, 50, 57, 32, 48, 49, 
	98, 115, 9, 13, 50, 57, 32, 47, 
	48, 49, 98, 115, 9, 13, 50, 57, 
	32, 47, 49, 98, 104, 112, 115, 9, 
	13, 48, 57, 32, 47, 48, 49, 98, 
	104, 112, 115, 9, 13, 50, 57, 32, 
	48, 49, 98, 104, 112, 115, 9, 13, 
	50, 57, 32, 48, 49, 98, 115, 9, 
	13, 50, 57, 32, 47, 49, 98, 104, 
	112, 115, 9, 13, 48, 57, 32, 47, 
	48, 49, 98, 104, 112, 115, 9, 13, 
	50, 57, 32, 48, 49, 98, 104, 115, 
	116, 9, 13, 50, 57, 0
]

class << self
	attr_accessor :_pokerbot_single_lengths
	private :_pokerbot_single_lengths, :_pokerbot_single_lengths=
end
self._pokerbot_single_lengths = [
	0, 1, 1, 1, 1, 1, 7, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 0, 1, 1, 
	1, 1, 5, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 4, 6, 6, 1, 4, 6, 
	6, 1, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 4, 
	6, 6, 1, 4, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 9, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 1, 2, 1, 6, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 1, 1, 1, 4, 10, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	2, 1, 6, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 6, 2, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 1, 0, 5, 5, 
	4, 5, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	1, 1, 1, 1, 1, 0, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	0, 1, 1, 1, 0, 2, 0, 1, 
	1, 1, 3, 3, 2, 1, 2, 1, 
	3, 1, 2, 2, 2, 4, 2, 4, 
	1, 1, 1, 0, 1, 0, 3, 1, 
	0, 0, 1, 1, 1, 0, 1, 0, 
	1, 1, 0, 1, 0, 5, 6, 7, 
	7, 5, 6, 7, 8, 7, 7, 5, 
	5, 5, 6, 7, 8, 7, 5, 7, 
	8, 7
]

class << self
	attr_accessor :_pokerbot_range_lengths
	private :_pokerbot_range_lengths, :_pokerbot_range_lengths=
end
self._pokerbot_range_lengths = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 2, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 1, 2, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 1, 3, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 2, 4, 4, 0, 2, 4, 
	4, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 3, 0, 2, 
	4, 4, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 2, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 2, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 0, 1, 1, 1, 2, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 1, 2, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 2, 1, 
	1, 2, 0, 1, 2, 0, 1, 2, 
	1, 0, 1, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	2, 1, 2, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
]

class << self
	attr_accessor :_pokerbot_index_offsets
	private :_pokerbot_index_offsets, :_pokerbot_index_offsets=
end
self._pokerbot_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 18, 
	20, 22, 24, 27, 29, 33, 37, 39, 
	41, 44, 47, 49, 51, 53, 55, 57, 
	59, 61, 64, 66, 68, 71, 75, 77, 
	79, 81, 83, 86, 88, 91, 93, 95, 
	97, 99, 102, 111, 113, 120, 122, 124, 
	126, 128, 130, 132, 134, 136, 138, 140, 
	142, 144, 146, 149, 154, 156, 158, 161, 
	167, 169, 171, 173, 175, 177, 179, 181, 
	183, 185, 187, 189, 191, 193, 195, 197, 
	200, 209, 211, 218, 229, 240, 242, 249, 
	260, 271, 273, 280, 282, 284, 286, 288, 
	290, 292, 294, 296, 298, 301, 310, 312, 
	319, 330, 341, 343, 350, 354, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 376, 
	386, 388, 390, 393, 399, 401, 403, 405, 
	407, 409, 411, 414, 417, 425, 429, 433, 
	435, 438, 440, 442, 444, 446, 448, 450, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 474, 477, 487, 489, 491, 494, 500, 
	512, 514, 516, 519, 525, 527, 529, 531, 
	533, 536, 539, 547, 551, 555, 557, 560, 
	562, 564, 566, 568, 570, 572, 576, 578, 
	580, 582, 584, 586, 588, 590, 592, 594, 
	596, 600, 603, 606, 614, 618, 622, 624, 
	627, 631, 633, 635, 637, 639, 641, 643, 
	645, 647, 651, 653, 655, 657, 659, 661, 
	663, 665, 667, 669, 672, 674, 676, 679, 
	683, 685, 687, 689, 691, 694, 702, 704, 
	706, 708, 710, 712, 715, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 747, 749, 751, 753, 
	755, 757, 759, 761, 767, 770, 772, 780, 
	787, 793, 801, 803, 806, 810, 812, 815, 
	819, 823, 825, 828, 830, 832, 834, 837, 
	839, 841, 843, 845, 847, 849, 852, 856, 
	859, 863, 866, 870, 873, 876, 877, 880, 
	881, 883, 885, 887, 890, 893, 896, 899, 
	902, 903, 905, 907, 909, 911, 914, 915, 
	917, 919, 921, 925, 930, 934, 937, 941, 
	945, 950, 953, 957, 961, 965, 971, 975, 
	981, 985, 988, 990, 991, 993, 994, 998, 
	1000, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 
	1012, 1014, 1016, 1017, 1019, 1020, 1028, 1037, 
	1047, 1057, 1065, 1074, 1084, 1095, 1105, 1115, 
	1123, 1131, 1139, 1148, 1158, 1169, 1179, 1187, 
	1197, 1208
]

class << self
	attr_accessor :_pokerbot_indicies
	private :_pokerbot_indicies, :_pokerbot_indicies=
end
self._pokerbot_indicies = [
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 7, 8, 9, 10, 11, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 16, 1, 17, 1, 18, 19, 18, 
	1, 18, 18, 20, 1, 21, 1, 22, 
	1, 18, 18, 1, 23, 24, 1, 25, 
	1, 26, 1, 27, 1, 28, 1, 29, 
	1, 30, 1, 31, 1, 32, 32, 1, 
	33, 1, 34, 1, 35, 35, 1, 35, 
	35, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 41, 1, 42, 1, 
	43, 42, 1, 45, 44, 46, 1, 47, 
	1, 48, 1, 49, 49, 1, 50, 51, 
	51, 51, 51, 51, 51, 51, 1, 51, 
	1, 52, 52, 52, 52, 52, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 66, 1, 67, 68, 69, 
	70, 1, 71, 1, 72, 1, 73, 73, 
	1, 73, 68, 69, 70, 73, 1, 75, 
	74, 76, 74, 77, 74, 76, 74, 78, 
	74, 76, 74, 79, 1, 80, 1, 81, 
	1, 82, 1, 83, 1, 84, 1, 85, 
	1, 86, 1, 87, 1, 88, 88, 1, 
	89, 90, 90, 90, 90, 90, 90, 90, 
	1, 90, 1, 91, 91, 91, 91, 91, 
	91, 1, 92, 93, 94, 94, 94, 94, 
	92, 94, 94, 94, 1, 95, 96, 97, 
	97, 97, 97, 95, 97, 97, 97, 1, 
	97, 1, 98, 98, 98, 98, 98, 98, 
	1, 99, 100, 101, 101, 101, 101, 99, 
	101, 101, 101, 1, 102, 103, 104, 104, 
	104, 104, 102, 104, 104, 104, 1, 104, 
	1, 105, 105, 105, 105, 105, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 115, 1, 116, 117, 117, 
	117, 117, 117, 117, 117, 1, 117, 1, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	120, 121, 121, 121, 121, 119, 121, 121, 
	121, 1, 122, 123, 124, 124, 124, 124, 
	122, 124, 124, 124, 1, 124, 1, 125, 
	125, 125, 125, 125, 125, 1, 126, 127, 
	128, 1, 129, 1, 130, 1, 131, 1, 
	132, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 139, 138, 1, 
	140, 141, 142, 143, 144, 144, 145, 146, 
	147, 1, 148, 1, 149, 1, 150, 150, 
	1, 150, 151, 143, 145, 150, 1, 153, 
	152, 154, 152, 155, 152, 154, 152, 156, 
	152, 154, 152, 157, 158, 1, 159, 159, 
	44, 159, 160, 161, 162, 163, 164, 159, 
	44, 165, 166, 165, 44, 165, 165, 167, 
	44, 168, 44, 165, 165, 44, 169, 152, 
	170, 152, 171, 152, 170, 152, 172, 152, 
	170, 152, 165, 173, 165, 44, 174, 44, 
	175, 44, 168, 44, 157, 1, 157, 1, 
	157, 1, 176, 1, 177, 1, 159, 159, 
	157, 1, 178, 178, 1, 179, 180, 181, 
	182, 183, 183, 184, 185, 186, 1, 187, 
	1, 188, 1, 189, 189, 1, 189, 190, 
	182, 184, 189, 1, 192, 193, 194, 195, 
	182, 196, 196, 184, 197, 198, 192, 191, 
	199, 191, 200, 191, 201, 201, 191, 201, 
	190, 182, 184, 201, 191, 202, 191, 203, 
	191, 204, 191, 203, 191, 205, 206, 191, 
	207, 207, 191, 207, 208, 209, 210, 211, 
	212, 207, 191, 213, 214, 213, 191, 213, 
	213, 215, 191, 216, 191, 213, 213, 191, 
	217, 191, 218, 191, 219, 191, 218, 191, 
	220, 191, 218, 191, 213, 221, 213, 191, 
	222, 191, 223, 191, 216, 191, 205, 191, 
	224, 191, 203, 191, 205, 191, 205, 191, 
	225, 191, 226, 191, 207, 207, 205, 191, 
	227, 228, 1, 229, 229, 44, 229, 230, 
	209, 210, 211, 231, 229, 44, 232, 233, 
	232, 44, 232, 232, 215, 44, 234, 44, 
	232, 232, 44, 232, 235, 232, 44, 236, 
	44, 237, 44, 234, 44, 227, 1, 227, 
	1, 227, 1, 238, 1, 239, 1, 229, 
	229, 227, 1, 240, 1, 241, 1, 242, 
	1, 243, 1, 244, 1, 245, 1, 246, 
	1, 247, 1, 248, 1, 249, 249, 1, 
	250, 1, 251, 1, 252, 252, 1, 252, 
	252, 253, 1, 254, 1, 255, 1, 256, 
	1, 257, 1, 258, 258, 1, 259, 260, 
	261, 262, 263, 264, 265, 1, 267, 266, 
	268, 266, 269, 266, 270, 266, 271, 266, 
	272, 273, 266, 274, 266, 275, 266, 276, 
	266, 277, 266, 278, 266, 279, 266, 280, 
	266, 281, 266, 282, 266, 283, 266, 284, 
	266, 285, 266, 286, 266, 287, 266, 288, 
	266, 289, 266, 290, 1, 291, 266, 292, 
	266, 293, 266, 294, 266, 295, 266, 296, 
	266, 297, 298, 299, 300, 297, 1, 302, 
	303, 301, 304, 301, 305, 303, 306, 308, 
	309, 305, 307, 301, 302, 307, 310, 310, 
	310, 303, 301, 302, 310, 310, 310, 303, 
	301, 311, 312, 313, 308, 309, 311, 314, 
	301, 315, 301, 316, 316, 301, 316, 316, 
	317, 301, 318, 301, 319, 319, 301, 319, 
	319, 320, 301, 316, 315, 316, 301, 321, 
	1, 322, 297, 1, 323, 301, 324, 301, 
	325, 301, 297, 297, 301, 326, 301, 327, 
	301, 328, 301, 329, 301, 330, 301, 300, 
	301, 331, 331, 44, 297, 300, 297, 1, 
	332, 333, 1, 335, 335, 336, 334, 338, 
	338, 337, 340, 340, 341, 339, 343, 343, 
	342, 43, 45, 344, 345, 347, 348, 346, 
	346, 349, 346, 350, 346, 349, 346, 352, 
	352, 351, 354, 354, 353, 356, 356, 355, 
	358, 358, 357, 360, 361, 359, 359, 362, 
	359, 363, 359, 362, 359, 167, 364, 365, 
	366, 364, 364, 367, 364, 368, 364, 367, 
	364, 360, 361, 157, 359, 370, 371, 372, 
	370, 369, 370, 373, 370, 369, 370, 370, 
	369, 370, 374, 370, 369, 376, 376, 215, 
	375, 376, 377, 378, 376, 375, 376, 376, 
	375, 376, 379, 376, 375, 376, 380, 376, 
	375, 376, 379, 376, 375, 370, 371, 372, 
	205, 370, 369, 370, 374, 370, 369, 370, 
	371, 372, 227, 370, 369, 382, 382, 383, 
	381, 385, 385, 384, 387, 386, 386, 389, 
	388, 388, 391, 392, 282, 390, 393, 390, 
	390, 394, 282, 390, 396, 395, 397, 395, 
	395, 399, 398, 398, 401, 400, 402, 400, 
	400, 404, 403, 403, 406, 303, 306, 308, 
	309, 406, 307, 405, 408, 302, 409, 410, 
	412, 413, 408, 411, 407, 415, 416, 417, 
	419, 420, 420, 421, 415, 418, 414, 415, 
	416, 417, 422, 423, 423, 421, 415, 418, 
	414, 424, 416, 417, 425, 421, 424, 418, 
	414, 427, 302, 428, 429, 431, 432, 427, 
	430, 426, 427, 302, 429, 433, 310, 310, 
	432, 427, 430, 426, 427, 302, 428, 429, 
	433, 310, 310, 432, 427, 430, 426, 415, 
	416, 417, 434, 420, 420, 421, 415, 418, 
	414, 424, 416, 417, 422, 423, 423, 421, 
	424, 418, 414, 415, 416, 417, 435, 421, 
	415, 418, 414, 427, 428, 429, 431, 432, 
	427, 430, 426, 437, 438, 439, 441, 442, 
	437, 440, 436, 437, 302, 438, 439, 441, 
	442, 437, 440, 436, 437, 302, 439, 443, 
	310, 310, 442, 437, 440, 436, 437, 302, 
	438, 439, 443, 310, 310, 442, 437, 440, 
	436, 415, 416, 417, 444, 423, 423, 421, 
	415, 418, 414, 415, 416, 417, 425, 421, 
	415, 418, 414, 408, 302, 410, 445, 310, 
	310, 413, 408, 411, 407, 408, 302, 409, 
	410, 445, 310, 310, 413, 408, 411, 407, 
	406, 303, 306, 308, 446, 309, 447, 406, 
	307, 405, 0
]

class << self
	attr_accessor :_pokerbot_trans_targs
	private :_pokerbot_trans_targs, :_pokerbot_trans_targs=
end
self._pokerbot_trans_targs = [
	2, 0, 3, 4, 5, 6, 7, 17, 
	38, 45, 70, 91, 108, 8, 9, 10, 
	11, 12, 13, 14, 288, 15, 16, 18, 
	30, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 290, 31, 32, 33, 
	34, 35, 36, 37, 287, 292, 39, 40, 
	41, 42, 43, 44, 293, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 294, 297, 298, 61, 
	62, 63, 287, 65, 295, 67, 69, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 84, 
	85, 86, 87, 88, 89, 90, 88, 89, 
	90, 299, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 105, 106, 107, 301, 109, 210, 
	224, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 153, 120, 130, 314, 306, 
	148, 307, 149, 150, 121, 122, 123, 303, 
	287, 125, 304, 127, 129, 131, 147, 132, 
	133, 309, 312, 313, 143, 134, 135, 308, 
	136, 138, 310, 140, 142, 144, 145, 146, 
	151, 152, 154, 155, 193, 327, 316, 205, 
	318, 206, 207, 156, 157, 158, 315, 287, 
	159, 160, 168, 325, 188, 189, 190, 161, 
	162, 163, 165, 317, 167, 169, 185, 170, 
	171, 320, 323, 324, 181, 172, 173, 319, 
	174, 176, 321, 178, 180, 182, 183, 184, 
	187, 191, 192, 194, 204, 195, 196, 200, 
	197, 198, 199, 201, 202, 203, 208, 209, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 328, 225, 226, 
	227, 228, 229, 330, 332, 334, 339, 342, 
	252, 347, 287, 231, 331, 233, 333, 335, 
	236, 239, 237, 238, 336, 240, 241, 242, 
	243, 244, 337, 340, 247, 248, 341, 250, 
	251, 343, 344, 345, 255, 256, 346, 258, 
	348, 349, 273, 286, 285, 287, 261, 260, 
	350, 262, 263, 264, 266, 269, 351, 265, 
	354, 355, 356, 267, 268, 360, 270, 271, 
	361, 274, 369, 276, 277, 278, 280, 281, 
	282, 283, 284, 349, 1, 259, 287, 289, 
	288, 287, 289, 287, 291, 290, 287, 291, 
	287, 287, 287, 64, 296, 66, 68, 287, 
	300, 287, 300, 287, 302, 287, 302, 287, 
	124, 305, 126, 128, 287, 137, 311, 139, 
	141, 287, 159, 186, 326, 164, 166, 287, 
	159, 175, 322, 177, 179, 287, 329, 328, 
	287, 329, 287, 230, 287, 232, 287, 234, 
	338, 235, 287, 287, 245, 246, 287, 249, 
	287, 253, 254, 287, 257, 287, 349, 287, 
	262, 350, 367, 368, 266, 269, 287, 262, 
	260, 263, 264, 352, 365, 269, 353, 359, 
	265, 272, 287, 349, 354, 355, 356, 266, 
	269, 357, 358, 266, 287, 349, 362, 363, 
	364, 266, 269, 357, 366, 357, 275, 279
]

class << self
	attr_accessor :_pokerbot_trans_actions
	private :_pokerbot_trans_actions, :_pokerbot_trans_actions=
end
self._pokerbot_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	41, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 0, 0, 0, 17, 0, 0, 0, 
	0, 35, 0, 0, 67, 150, 0, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 31, 0, 47, 47, 47, 0, 
	0, 0, 61, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 25, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 29, 0, 0, 0, 144, 47, 
	0, 47, 0, 0, 0, 0, 0, 47, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 47, 47, 47, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 0, 0, 147, 47, 0, 
	47, 0, 0, 0, 0, 0, 47, 63, 
	0, 0, 0, 47, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 0, 0, 
	0, 47, 47, 47, 0, 0, 0, 47, 
	0, 0, 47, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 39, 0, 0, 0, 19, 0, 0, 
	0, 0, 43, 47, 47, 47, 47, 47, 
	0, 47, 65, 0, 0, 0, 0, 47, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 0, 0, 
	0, 0, 47, 47, 0, 0, 0, 0, 
	0, 138, 0, 0, 0, 57, 0, 0, 
	47, 0, 0, 0, 0, 0, 47, 0, 
	132, 132, 132, 0, 0, 132, 0, 0, 
	135, 0, 193, 0, 0, 0, 0, 0, 
	0, 0, 0, 141, 0, 0, 96, 9, 
	0, 55, 0, 87, 5, 0, 51, 0, 
	81, 69, 108, 0, 47, 0, 0, 153, 
	1, 72, 0, 157, 1, 75, 0, 105, 
	0, 47, 0, 0, 99, 0, 47, 0, 
	0, 111, 13, 0, 47, 0, 0, 102, 
	11, 0, 47, 0, 0, 93, 7, 0, 
	53, 0, 177, 0, 169, 0, 161, 0, 
	0, 0, 165, 173, 0, 0, 185, 0, 
	189, 0, 0, 181, 0, 49, 47, 78, 
	3, 120, 120, 120, 3, 3, 114, 15, 
	15, 15, 15, 129, 47, 15, 129, 47, 
	15, 15, 84, 123, 123, 123, 123, 5, 
	5, 123, 129, 15, 90, 126, 126, 126, 
	126, 7, 7, 126, 129, 120, 0, 0
]

class << self
	attr_accessor :_pokerbot_to_state_actions
	private :_pokerbot_to_state_actions, :_pokerbot_to_state_actions=
end
self._pokerbot_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 117, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_pokerbot_from_state_actions
	private :_pokerbot_from_state_actions, :_pokerbot_from_state_actions=
end
self._pokerbot_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_pokerbot_eof_trans
	private :_pokerbot_eof_trans, :_pokerbot_eof_trans=
end
self._pokerbot_eof_trans = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 45, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	75, 75, 75, 75, 75, 75, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 153, 153, 153, 153, 
	153, 153, 0, 45, 45, 45, 45, 45, 
	45, 153, 153, 153, 153, 153, 153, 45, 
	45, 45, 45, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 0, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 0, 267, 267, 267, 
	267, 267, 267, 0, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 0, 0, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 45, 0, 0, 
	335, 338, 340, 343, 345, 346, 347, 347, 
	347, 347, 347, 352, 354, 356, 358, 360, 
	360, 360, 360, 360, 365, 365, 365, 365, 
	365, 365, 360, 370, 370, 370, 370, 376, 
	376, 376, 376, 376, 376, 370, 370, 370, 
	382, 385, 387, 387, 389, 389, 391, 391, 
	391, 395, 391, 396, 396, 396, 399, 399, 
	401, 401, 401, 404, 404, 406, 408, 415, 
	415, 415, 427, 427, 427, 415, 415, 415, 
	427, 437, 437, 437, 437, 415, 415, 408, 
	408, 406
]

class << self
	attr_accessor :pokerbot_start
end
self.pokerbot_start = 287;
class << self
	attr_accessor :pokerbot_first_final
end
self.pokerbot_first_final = 287;
class << self
	attr_accessor :pokerbot_error
end
self.pokerbot_error = 0;

class << self
	attr_accessor :pokerbot_en_main
end
self.pokerbot_en_main = 287;


# line 192 "lib/fb_pokerbot_parser/message_parser.rl"
    data = data.unpack("c*") if data.is_a?(String)
    eof  = data.length
    cp   = 0

    @status     = false   # true if status request
    @command    = ""
    @cards      = []
    @options    = {}
    @actions    = []
    @flop       = []
    @turn       = []
    @river      = []
    @hole_cards = []
    @blinds     = {}
    @amount     = nil

    
# line 931 "lib/fb_pokerbot_parser/message_parser.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = pokerbot_start
	ts = nil
	te = nil
	act = 0
end

# line 209 "lib/fb_pokerbot_parser/message_parser.rl"
    
# line 943 "lib/fb_pokerbot_parser/message_parser.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_acts = _pokerbot_from_state_actions[cs]
	_nacts = _pokerbot_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _pokerbot_actions[_acts - 1]
			when 35 then
# line 1 "NONE"
		begin
ts = p
		end
# line 977 "lib/fb_pokerbot_parser/message_parser.rb"
		end # from state action switch
	end
	if _trigger_goto
		next
	end
	_keys = _pokerbot_key_offsets[cs]
	_trans = _pokerbot_index_offsets[cs]
	_klen = _pokerbot_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _pokerbot_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _pokerbot_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _pokerbot_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _pokerbot_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _pokerbot_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _pokerbot_indicies[_trans]
	end
	if _goto_level <= _eof_trans
	cs = _pokerbot_trans_targs[_trans]
	if _pokerbot_trans_actions[_trans] != 0
		_acts = _pokerbot_trans_actions[_trans]
		_nacts = _pokerbot_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _pokerbot_actions[_acts - 1]
when 0 then
# line 53 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    parseCard(data[cp..(p-1)].pack('c*').strip)
    cp = p
  		end
when 1 then
# line 57 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    @flop = @cards if @cards.count == 3
  		end
when 2 then
# line 60 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    @hole_cards = @cards if @cards.count == 2
  		end
when 3 then
# line 70 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    parseBlinds(data[cp..(p-1)].pack('c*').strip)
   # cp = p
  		end
when 4 then
# line 75 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    parseBigBlind(data[cp..(p-1)].pack('c*').strip)
    cp = p
  		end
when 5 then
# line 80 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    value = data[cp..(p-1)].pack('c*').strip
    @blinds[:sb] = value.to_i
    cp = p
  		end
when 6 then
# line 86 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    value = data[cp..(p-1)].pack('c*').strip
    @blinds[:ante] = value.to_i
    cp = p
  		end
when 7 then
# line 92 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    value = data[cp..p].pack('c*').strip
    seat, action, amount = value.split(' ')
    amount = amount.to_i unless amount.nil?
    @actions << {seat: seat, action: ACTIONS.fetch(action,nil), amount: amount}
    cp = p
  		end
when 8 then
# line 100 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    value = data[cp..p].pack('c*').strip
    action = value.split(" ").last
    @actions << {seat: 'all', action: ACTIONS.fetch(action,nil), amount: nil}
    cp = p
  		end
when 9 then
# line 107 "lib/fb_pokerbot_parser/message_parser.rl"
		begin

    parse_seating_options(data[cp..p].pack('c*').strip)
    cp = p
  		end
when 10 then
# line 142 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 11 then
# line 143 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 12 then
# line 144 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 13 then
# line 151 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('nh'); cp = p 		end
when 14 then
# line 152 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('nt');  cp = p		end
when 15 then
# line 153 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('hero'); cp = p 		end
when 16 then
# line 154 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('pre'); cp = p 		end
when 17 then
# line 155 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('flop'); cp = p 		end
when 18 then
# line 156 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('turn'); cp = p 		end
when 19 then
# line 157 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('river'); cp = p 		end
when 20 then
# line 158 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_cmd('show'); cp = p 		end
when 21 then
# line 160 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 set_status 		end
when 22 then
# line 175 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 23 then
# line 176 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 24 then
# line 177 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 25 then
# line 178 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 26 then
# line 179 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 27 then
# line 180 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 28 then
# line 181 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 29 then
# line 182 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 30 then
# line 183 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 31 then
# line 184 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 32 then
# line 185 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
cp = p		end
when 36 then
# line 1 "NONE"
		begin
te = p+1
		end
when 37 then
# line 174 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
act = 1;		end
when 38 then
# line 178 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
act = 5;		end
when 39 then
# line 180 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
act = 7;		end
when 40 then
# line 181 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
act = 8;		end
when 41 then
# line 174 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 42 then
# line 175 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 43 then
# line 176 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 44 then
# line 177 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 45 then
# line 178 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 46 then
# line 179 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 47 then
# line 180 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 48 then
# line 181 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 49 then
# line 182 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 50 then
# line 183 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 51 then
# line 184 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 52 then
# line 185 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
te = p
p = p - 1;		end
when 53 then
# line 174 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 begin p = ((te))-1; end
		end
when 54 then
# line 178 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 begin p = ((te))-1; end
		end
when 55 then
# line 179 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 begin p = ((te))-1; end
		end
when 56 then
# line 180 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 begin p = ((te))-1; end
		end
when 57 then
# line 185 "lib/fb_pokerbot_parser/message_parser.rl"
		begin
 begin p = ((te))-1; end
		end
when 58 then
# line 1 "NONE"
		begin
	case act
	when 0 then
	begin	begin
		cs = 0
		_trigger_goto = true
		_goto_level = _again
		break
	end
end
	else
	begin begin p = ((te))-1; end
end
end 
			end
# line 1334 "lib/fb_pokerbot_parser/message_parser.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	_acts = _pokerbot_to_state_actions[cs]
	_nacts = _pokerbot_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _pokerbot_actions[_acts - 1]
when 33 then
# line 1 "NONE"
		begin
ts = nil;		end
when 34 then
# line 1 "NONE"
		begin
act = 0
		end
# line 1359 "lib/fb_pokerbot_parser/message_parser.rb"
		end # to state action switch
	end
	if _trigger_goto
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _pokerbot_eof_trans[cs] > 0
		_trans = _pokerbot_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 210 "lib/fb_pokerbot_parser/message_parser.rl"
  end

  def set_cmd(key)
    @command = COMMANDS.fetch(key, nil)
  end

  def set_status
    @status = true
  end

  def parseCard(card)
    suit = card[-1..-1]
    val  = card[0..-2]
    @cards << "#{val.upcase}#{suit.downcase}"
  end

  def parseBlinds(data)
    p "parsing blinds for #{data}"
    sb, bb, *straddles = data.split("/")
    @blinds[:sb] = sb.to_i
    @blinds[:bb] = bb.to_i
    return if straddles.empty?
    if straddles.count == 1 && straddles.first.to_i < @blinds[:bb]
      @blinds[:ante] = straddles.first.to_i
    else
      @blinds[:straddle] = straddles.map(&:to_i)
    end
  end

  def parseBigBlind(data)
    @blinds[:bb] = data.to_i
    @blinds[:sb] = (@blinds[:bb] / 2) if @blinds[:sb].nil?
  end

  def parse_seating_options(data)
    num = data.to_i 
    options = data.gsub(num.to_s,'')
    options.split('').each do |val|
      next unless key = NEW_HAND_OPTIONS.fetch(val,nil)
      @options[key] = num
    end
  end
    
end